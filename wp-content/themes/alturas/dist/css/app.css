@charset "UTF-8";
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* Fonts
–––––––––––––––––––––––––––––––––––––––––––––––––– */
/* This stylesheet generated by Transfonter (http://transfonter.org) */
@font-face {
  font-family: 'ClearfaceStd';
  src: url("ClearfaceStd-Bold.eot");
  src: url("ClearfaceStd-Bold.eot?#iefix") format("embedded-opentype"), url("ClearfaceStd-Bold.woff") format("woff"), url("ClearfaceStd-Bold.ttf") format("truetype");
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: 'CircularStd-Book';
  src: url("CircularStd-Book.eot");
  src: url("CircularStd-Book.eot?#iefix") format("embedded-opentype"), url("CircularStd-Book.woff") format("woff"), url("CircularStd-Book.ttf") format("truetype");
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: 'CircularStd-Book';
  src: url("CircularStd-Book_1.eot");
  src: url("CircularStd-Book_1.eot?#iefix") format("embedded-opentype"), url("CircularStd-Book_1.woff") format("woff"), url("CircularStd-Book_1.ttf") format("truetype");
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: 'ClearfaceStd-_1';
  src: url("ClearfaceStd-Bold_1.eot");
  src: url("ClearfaceStd-Bold_1.eot?#iefix") format("embedded-opentype"), url("ClearfaceStd-Bold_1.woff") format("woff"), url("ClearfaceStd-Bold_1.ttf") format("truetype");
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: 'ClearfaceLT';
  src: url("ClearfaceLT-Bold.eot");
  src: url("ClearfaceLT-Bold.eot?#iefix") format("embedded-opentype"), url("ClearfaceLT-Bold.woff") format("woff"), url("ClearfaceLT-Bold.ttf") format("truetype");
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: 'ClearfaceStd';
  src: url("ClearfaceStd-Regular.eot");
  src: url("ClearfaceStd-Regular.eot?#iefix") format("embedded-opentype"), url("ClearfaceStd-Regular.woff") format("woff"), url("ClearfaceStd-Regular.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'MyriadPro';
  src: url("MyriadPro-Regular.eot");
  src: url("MyriadPro-Regular.eot?#iefix") format("embedded-opentype"), url("MyriadPro-Regular.woff") format("woff"), url("MyriadPro-Regular.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
}

h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: 1rem;
  font-weight: 300;
  font-family: "ClearfaceStd";
}

h1 {
  font-size: 3.5rem;
  line-height: 1.2;
  letter-spacing: .1rem;
}

h2 {
  font-size: 3rem;
  line-height: 1.25;
  letter-spacing: .1rem;
}

h3 {
  font-size: 2.5rem;
  line-height: 1.3;
  letter-spacing: .1rem;
}

h4 {
  font-size: 2.0rem;
  line-height: 1.35;
  letter-spacing: -.08rem;
}

h5 {
  font-size: 1.8rem;
  line-height: 1.5;
  letter-spacing: -.05rem;
}

h6 {
  font-size: 1.5rem;
  line-height: 1.6;
  letter-spacing: 0;
}

@media (min-width: 768px) {
  h1 {
    font-size: 5.5rem;
  }
  h2 {
    font-size: 5.0rem;
  }
  h3 {
    font-size: 4.0rem;
  }
  h4 {
    font-size: 3.0rem;
  }
  h5 {
    font-size: 2.4rem;
  }
  h6 {
    font-size: 1.5rem;
  }
}

p {
  margin-top: 0;
  color: #000000;
  font-family: "MyriadPro";
  letter-spacing: .1rem;
  font-size: 1.2rem;
}

@media (min-width: 768px) {
  p {
    font-size: 1.6rem;
  }
}

a {
  color: #1eaedb;
}

a:hover {
  color: #1b9cc5;
}

.img-responsive {
  max-width: 100%;
  height: auto;
}

.button,
button {
  display: inline-block;
  height: 38px;
  padding: 0 30px;
  color: #555555;
  text-align: center;
  font-size: 11px;
  font-weight: 600;
  line-height: 38px;
  letter-spacing: .1rem;
  text-transform: uppercase;
  text-decoration: none;
  white-space: nowrap;
  background-color: transparent;
  border: 1px solid #000;
  cursor: pointer;
  box-sizing: border-box;
}

input[type="submit"],
input[type="reset"],
input[type="button"] {
  display: inline-block;
  height: 38px;
  padding: 0 30px;
  color: #555555;
  text-align: center;
  font-size: 11px;
  font-weight: 600;
  line-height: 38px;
  letter-spacing: .1rem;
  text-transform: uppercase;
  text-decoration: none;
  white-space: nowrap;
  background-color: transparent;
  border: 1px solid #000;
  cursor: pointer;
  box-sizing: border-box;
}

.button:hover,
button:hover {
  color: #333;
  border-color: #888888;
  outline: 0;
}

input[type="submit"]:hover,
input[type="reset"]:hover,
input[type="button"]:hover {
  color: #333;
  border-color: #888888;
  outline: 0;
}

.button:focus,
button:focus {
  color: #333;
  border-color: #888888;
  outline: 0;
}

input[type="submit"]:focus,
input[type="reset"]:focus,
input[type="button"]:focus {
  color: #333;
  border-color: #888888;
  outline: 0;
}

.button.button-primary,
button.button-primary {
  color: #fff;
  background-color: #33c3f0;
  border-color: #33c3f0;
}

input[type="submit"].button-primary,
input[type="reset"].button-primary,
input[type="button"].button-primary {
  color: #fff;
  background-color: #33c3f0;
  border-color: #33c3f0;
}

.button.button-primary:hover,
button.button-primary:hover {
  color: #fff;
  background-color: #1eaedb;
  border-color: #1eaedb;
}

input[type="submit"].button-primary:hover,
input[type="reset"].button-primary:hover,
input[type="button"].button-primary:hover {
  color: #fff;
  background-color: #1eaedb;
  border-color: #1eaedb;
}

.button.button-primary:focus,
button.button-primary:focus {
  color: #fff;
  background-color: #1eaedb;
  border-color: #1eaedb;
}

input[type="submit"].button-primary:focus,
input[type="reset"].button-primary:focus,
input[type="button"].button-primary:focus {
  color: #fff;
  background-color: #1eaedb;
  border-color: #1eaedb;
}

input[type="email"],
input[type="number"],
input[type="search"],
input[type="text"],
input[type="tel"],
input[type="url"],
input[type="password"] {
  height: 38px;
  padding: 6px 10px;
  background-color: #fff;
  box-shadow: none;
  box-sizing: border-box;
}

.wrap {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto;
}

.wrap:after {
  content: " ";
  display: block;
  clear: both;
}

.col2,
.col3,
.col4 {
  width: 97.2222222222%;
  float: left;
  margin-left: 1.3888888889%;
  margin-right: 1.3888888889%;
}

@media (min-width: 768px) {
  .col2 {
    width: 47.2222222222%;
    float: left;
    margin-left: 1.3888888889%;
    margin-right: 1.3888888889%;
  }
  .col3 {
    width: 30.5555555556%;
    float: left;
    margin-left: 1.3888888889%;
    margin-right: 1.3888888889%;
  }
  .col4 {
    width: 47.2222222222%;
    float: left;
    margin-left: 1.3888888889%;
    margin-right: 1.3888888889%;
  }
  .wrap {
    max-width: 750px;
    margin-left: auto;
    margin-right: auto;
  }
  .wrap:after {
    content: " ";
    display: block;
    clear: both;
  }
}

@media (min-width: 992px) {
  .wrap {
    max-width: 970px;
    margin-left: auto;
    margin-right: auto;
  }
  .wrap:after {
    content: " ";
    display: block;
    clear: both;
  }
  .col4 {
    width: 22.2222222222%;
    float: left;
    margin-left: 1.3888888889%;
    margin-right: 1.3888888889%;
  }
}

@media (min-width: 1200px) {
  .wrap {
    max-width: 1170px;
    margin-left: auto;
    margin-right: auto;
  }
  .wrap:after {
    content: " ";
    display: block;
    clear: both;
  }
}

.item {
  background-color: #e6e6e6;
  height: 200px;
  margin-bottom: 30px;
}

html {
  font-size: 62.5%;
}

body {
  font-size: 1.5em;
  line-height: 1.6;
  font-weight: 400;
  font-family: "ClearfaceStd";
}

.landing-background-image {
  width: 100%;
  background-size: cover;
  height: 50vh;
  width: 100%;
  margin: 0;
  float: left;
  position: relative;
}

@media (min-width: 992px) {
  .landing-background-image {
    width: 50%;
    height: 100vh;
  }
}

.image-content-wrapper {
  text-align: center;
  position: absolute;
  bottom: 10%;
  left: 0;
  right: 0;
  padding: 0 10%;
  margin: 0 auto;
}

.image-content-wrapper h1 {
  color: #ffffff;
}

.image-content-wrapper p {
  color: #ffffff;
  letter-spacing: .4rem;
  text-transform: uppercase;
}

.intro {
  text-align: center;
  position: relative;
}

@media (min-width: 768px) {
  .intro {
    width: 63.8888888889%;
    float: left;
    margin-left: 1.3888888889%;
    margin-right: 1.3888888889%;
    margin-left: 18.0555555556%;
  }
}

@media (min-width: 992px) {
  .intro {
    padding: 80px 0;
  }
}

.intro .intro-content {
  color: #000000;
}

.intro .intro-content h1 {
  font-size: 8.0rem;
}

.intro .intro-content p {
  padding: 0 20%;
}

.gray-background {
  background-color: #e6e6e6;
}

.feature {
  padding: 15px;
}

@media (min-width: 768px) {
  .feature {
    padding: 80px 100px;
  }
}

.feature-block {
  height: 500px;
  margin: 0 auto;
  background-color: #ffffff;
  position: relative;
  width: 100%;
  border-bottom: 5px solid #000000;
}

@media (min-width: 1025px) {
  .feature-block {
    width: 50%;
  }
}

.feature-block .feature-block-content {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  text-align: center;
}

.image-block {
  height: 500px;
  margin-bottom: 30px;
}

.image-block-background-image {
  height: 300px;
}

.image-block-content {
  background-color: #e6e6e6;
  padding: 40px;
  text-align: center;
  border-bottom: 5px solid #000000;
}

/*# sourceMappingURL=data:application/json;base64, */